#!/bin/bash

set -euo pipefail

# --- Config ---
SRC_DIR="src"
ENV_FILE=".env"
MODULES=(utils.sh funcs.sh services.sh main.sh)

# --- .env ---
get_env() {
    local key="$1"
    grep -E "^$key=" "$ENV_FILE" | head -n1 | cut -d= -f2- | \
        sed 's/^["'\'']//;s/["'\'']$//' | tr -d '\r' | tr -d '\n' | tr -d '\000-\037\177'
}

SCRIPT_VERSION=$(get_env SCRIPT_VERSION || echo "0.0.0")
SCRIPT_AUTHOR=$(get_env SCRIPT_AUTHOR || echo "Unknown")
SCRIPT_REPO=$(get_env SCRIPT_REPO || echo "Unknown")
BUILD_DATE=$(date +%Y.%m.%d)

export SCRIPT_VERSION SCRIPT_AUTHOR SCRIPT_REPO BUILD_DATE

SCRIPT_NAME=$(get_env SCRIPT_NAME || echo "torstp")
OUT="$SCRIPT_NAME"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
USER=$(whoami)
HOST=$(hostname)

# --- Header ---
cat > "$OUT" <<EOF
#!/bin/bash

# =============================================================================
# Tor Hidden Service Setup Script - Bundled Version
# =============================================================================
#
# Auto-generated from modular components
# Generated on: $TIMESTAMP
# Generated by: $USER@$HOST
# Bundle method: bash bundler (Unix line endings)
# Minification: No
#
# Version: $SCRIPT_VERSION
# (Build: $BUILD_DATE)
# Author: $SCRIPT_AUTHOR
# Repository: $SCRIPT_REPO
# License: MIT
#
# This is a bundled version of the modular Tor setup script
# Original modules: utils.sh, funcs.sh, services.sh, main.sh
#
# For latest updates and source: $SCRIPT_REPO
#
# =============================================================================
# SELF-SETUP: Handle execution permissions and common issues
# =============================================================================

fix_permissions() {
    local script_path="\$0"
    if [[ ! -x "\$script_path" ]]; then
        echo "üîß Script is not executable, attempting to fix..."
        if chmod +x "\$script_path" 2>/dev/null; then
            echo "‚úÖ Script permissions fixed successfully"
            echo "üîÑ Re-executing script with original arguments..."
            exec "\$script_path" "\$@"
        else
            echo "‚ùå Could not fix script permissions"
            echo "üí° Please run manually: chmod +x \$script_path"
            echo "   Then run: \$script_path \$*"
            exit 1
        fi
    fi
}
if [[ "\${BASH_SOURCE[0]}" == "\${0}" ]]; then
    fix_permissions "\$@"
fi

set -euo pipefail

EOF

# --- Prepare utils.sh with embedded metadata ---
UTILS_PATH="$SRC_DIR/utils.sh"
UTILS_TMP="$(mktemp)"

# Replace metadata lines with values from .env and build date
awk '
    BEGIN {
        version = ENVIRON["SCRIPT_VERSION"];
        build = ENVIRON["BUILD_DATE"];
        author = ENVIRON["SCRIPT_AUTHOR"];
        repo = ENVIRON["SCRIPT_REPO"];
    }
    /^SCRIPT_VERSION=/ { print "SCRIPT_VERSION=\"" version "\""; next }
    /^SCRIPT_BUILD=/   { print "SCRIPT_BUILD=\"" build "\""; next }
    /^SCRIPT_AUTHOR=/  { print "SCRIPT_AUTHOR=\"" author "\""; next }
    /^SCRIPT_REPO=/    { print "SCRIPT_REPO=\"" repo "\""; next }
    { print }
' "$UTILS_PATH" > "$UTILS_TMP"

# --- Bundle modules ---
for mod in "${MODULES[@]}"; do
    MOD_PATH="$SRC_DIR/$mod"
    if [[ "$mod" == "utils.sh" ]]; then
        cat "$UTILS_TMP" >> "$OUT"
    else
        grep -vE '^(#\!|# shellcheck source=|source .*/.*\.sh|SCRIPT_DIR=|set -euo pipefail)' "$MOD_PATH" >> "$OUT"
    fi
    echo "" >> "$OUT"
    echo "# =============================================================================" >> "$OUT"
    echo "# START OF: $mod" >> "$OUT"
    echo "# =============================================================================" >> "$OUT"
    # Remove shebang and source lines, keep everything else
    grep -vE '^(#\!|# shellcheck source=|source .*/.*\.sh|SCRIPT_DIR=|set -euo pipefail)' "$MOD_PATH" >> "$OUT"
    echo "" >> "$OUT"
    echo "# =============================================================================" >> "$OUT"
    echo "# END OF: $mod" >> "$OUT"
    echo "# =============================================================================" >> "$OUT"
done

rm -f "$UTILS_TMP"

chmod +x "$OUT"
echo "‚úÖ Bundle complete: $OUT"

### üçâ mawterlenon

### "That man is playing Galaga. He thought we wouldn't notice. But we did."
###  - Tony Stark, The Avengers (2012)

### End of bundler.sh
